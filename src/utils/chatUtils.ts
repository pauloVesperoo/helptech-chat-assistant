
import { faqList, servicesList } from "../data/faqData";

export interface ChatMessage {
  id: string;
  type: 'user' | 'bot';
  text: string;
  timestamp: Date;
}

export interface Contact {
  name: string;
  email: string;
}

export interface AppointmentInfo {
  service: string;
  date: string;
  time: string;
  details?: string;
}

export type BotState = 
  | 'greeting'
  | 'main_menu'
  | 'faq'
  | 'services'
  | 'service_details'
  | 'appointment'
  | 'appointment_service'
  | 'appointment_date'
  | 'appointment_time'
  | 'appointment_details'
  | 'appointment_confirmation'
  | 'contact'
  | 'contact_name'
  | 'contact_email'
  | 'human_agent'
  | 'exit';

export interface ChatState {
  messages: ChatMessage[];
  botState: BotState;
  contact: Contact | null;
  appointment: AppointmentInfo | null;
  currentServiceId?: string;
  isTyping: boolean;
}

export const generateId = (): string => {
  return Math.random().toString(36).substring(2, 9);
};

export const createChatMessage = (text: string, type: 'user' | 'bot'): ChatMessage => {
  return {
    id: generateId(),
    type,
    text,
    timestamp: new Date()
  };
};

export const getGreetingMessage = (): string => {
  const hour = new Date().getHours();
  let greeting = "Ol√°";
  
  if (hour < 12) {
    greeting = "Bom dia";
  } else if (hour < 18) {
    greeting = "Boa tarde";
  } else {
    greeting = "Boa noite";
  }
  
  return `${greeting}! Bem-vindo √† HelpTech Suporte T√©cnico. Sou o assistente virtual e estou aqui para ajudar com informa√ß√µes sobre nossos servi√ßos de suporte t√©cnico para computadores e dispositivos m√≥veis. Como posso ajudar hoje?`;
};

export const getMainMenuOptions = (): string => {
  return `
O que voc√™ gostaria de saber?

1Ô∏è‚É£ Informa√ß√µes sobre nossos servi√ßos
2Ô∏è‚É£ Perguntas frequentes (FAQ)
3Ô∏è‚É£ Agendar um atendimento
4Ô∏è‚É£ Falar com um atendente humano
5Ô∏è‚É£ Deixar seus dados para contato

Digite o n√∫mero da op√ß√£o desejada ou escreva sua d√∫vida.`;
};

export const getServicesList = (): string => {
  return `
Oferecemos os seguintes servi√ßos de suporte t√©cnico:

${servicesList.map((service, index) => `${index + 1}. ${service.name}`).join('\n')}

Digite o n√∫mero do servi√ßo para mais detalhes ou "menu" para voltar ao menu principal.`;
};

export const getServiceDetails = (serviceId: string): string => {
  const service = servicesList.find(s => s.id === serviceId);
  if (!service) {
    return "Desculpe, n√£o encontrei informa√ß√µes sobre este servi√ßo.";
  }

  return `
üìå ${service.name}

${service.description}

üí∞ Faixa de pre√ßo: ${service.priceRange}
‚è±Ô∏è Tempo estimado: ${service.estimatedTime}

Digite "agendar" para marcar este servi√ßo ou "menu" para voltar ao menu principal.`;
};

export const getFAQList = (): string => {
  return `
Perguntas frequentes:

${faqList.map((faq, index) => `${index + 1}. ${faq.question}`).join('\n')}

Digite o n√∫mero da pergunta para ver a resposta ou "menu" para voltar ao menu principal.`;
};

export const getFAQAnswer = (index: number): string => {
  if (index < 0 || index >= faqList.length) {
    return "Desculpe, n√£o encontrei esta pergunta.";
  }
  
  return `
${faqList[index].question}

${faqList[index].answer}

Posso ajudar com mais alguma d√∫vida?`;
};

export const processUserInput = (input: string, state: ChatState): { responseText: string; newState: BotState; stateChanges?: Partial<ChatState> } => {
  const lowerInput = input.toLowerCase().trim();
  
  // Handle menu navigation commands in any state
  if (lowerInput === 'menu' || lowerInput === 'voltar' || lowerInput === 'voltar ao menu') {
    return {
      responseText: getMainMenuOptions(),
      newState: 'main_menu'
    };
  }
  
  // Handle human agent request in any state
  if (lowerInput.includes('humano') || lowerInput.includes('atendente') || lowerInput.includes('pessoa')) {
    return {
      responseText: "Entendi que voc√™ precisa falar com um de nossos t√©cnicos. Vou transferir seu atendimento agora. Um momento por favor...",
      newState: 'human_agent'
    };
  }

  // Handle exit request in any state
  if (lowerInput === 'sair' || lowerInput === 'finalizar' || lowerInput === 'encerrar') {
    return {
      responseText: "Obrigado por conversar com a HelpTech! Se precisar de mais ajuda, √© s√≥ voltar. Tenha um √≥timo dia!",
      newState: 'exit'
    };
  }

  // Handle state-specific logic
  switch (state.botState) {
    case 'greeting':
      return {
        responseText: getMainMenuOptions(),
        newState: 'main_menu'
      };
      
    case 'main_menu':
      if (lowerInput === '1' || lowerInput.includes('servi√ßo')) {
        return {
          responseText: getServicesList(),
          newState: 'services'
        };
      } else if (lowerInput === '2' || lowerInput.includes('faq') || lowerInput.includes('pergunta') || lowerInput.includes('d√∫vida')) {
        return {
          responseText: getFAQList(),
          newState: 'faq'
        };
      } else if (lowerInput === '3' || lowerInput.includes('agend')) {
        return {
          responseText: "Para agendar um atendimento, primeiro me diga qual servi√ßo voc√™ precisa:\n\n" + servicesList.map((service, index) => `${index + 1}. ${service.name}`).join('\n'),
          newState: 'appointment_service'
        };
      } else if (lowerInput === '4' || lowerInput.includes('humano') || lowerInput.includes('atendente')) {
        return {
          responseText: "Entendi que voc√™ precisa falar com um de nossos t√©cnicos. Vou transferir seu atendimento agora. Um momento por favor...",
          newState: 'human_agent'
        };
      } else if (lowerInput === '5' || lowerInput.includes('dados') || lowerInput.includes('contato')) {
        return {
          responseText: "Para que possamos entrar em contato, por favor me informe seu nome:",
          newState: 'contact_name'
        };
      } else {
        // Try to identify if it's a FAQ question
        const faqMatch = faqList.findIndex(faq => 
          faq.question.toLowerCase().includes(lowerInput) || 
          lowerInput.includes(faq.question.toLowerCase().split(' ').slice(0, 3).join(' '))
        );
        
        if (faqMatch !== -1) {
          return {
            responseText: getFAQAnswer(faqMatch),
            newState: 'main_menu'
          };
        }
        
        // Check if it's about a service
        const serviceMatch = servicesList.find(service => 
          lowerInput.includes(service.name.toLowerCase()) || 
          (service.id === 'formatting' && (lowerInput.includes('format') || lowerInput.includes('reinstal'))) ||
          (service.id === 'virus' && (lowerInput.includes('v√≠rus') || lowerInput.includes('malware'))) ||
          (service.id === 'network' && (lowerInput.includes('rede') || lowerInput.includes('wifi') || lowerInput.includes('internet'))) ||
          (service.id === 'hardware' && (lowerInput.includes('quebr') || lowerInput.includes('consert') || lowerInput.includes('pe√ßa')))
        );
        
        if (serviceMatch) {
          return {
            responseText: getServiceDetails(serviceMatch.id),
            newState: 'service_details',
            stateChanges: { currentServiceId: serviceMatch.id }
          };
        }
        
        // Default response
        return {
          responseText: "Desculpe, n√£o entendi completamente. Poderia escolher uma das op√ß√µes abaixo?\n\n" + getMainMenuOptions(),
          newState: 'main_menu'
        };
      }
      
    case 'services':
      // Check if user selected a service by number
      const serviceIndex = parseInt(lowerInput) - 1;
      if (!isNaN(serviceIndex) && serviceIndex >= 0 && serviceIndex < servicesList.length) {
        const serviceId = servicesList[serviceIndex].id;
        return {
          responseText: getServiceDetails(serviceId),
          newState: 'service_details',
          stateChanges: { currentServiceId: serviceId }
        };
      } else {
        // Check if user mentioned a service by name
        const serviceMatch = servicesList.find(service => 
          lowerInput.includes(service.name.toLowerCase()) || 
          (service.id === 'formatting' && (lowerInput.includes('format') || lowerInput.includes('reinstal'))) ||
          (service.id === 'virus' && (lowerInput.includes('v√≠rus') || lowerInput.includes('malware'))) ||
          (service.id === 'network' && (lowerInput.includes('rede') || lowerInput.includes('wifi'))) ||
          (service.id === 'hardware' && (lowerInput.includes('quebr') || lowerInput.includes('consert')))
        );
        
        if (serviceMatch) {
          return {
            responseText: getServiceDetails(serviceMatch.id),
            newState: 'service_details',
            stateChanges: { currentServiceId: serviceMatch.id }
          };
        }
        
        return {
          responseText: "Desculpe, n√£o entendi qual servi√ßo voc√™ escolheu. Por favor, digite o n√∫mero do servi√ßo:\n\n" + getServicesList(),
          newState: 'services'
        };
      }
      
    case 'service_details':
      if (lowerInput.includes('agend')) {
        return {
          responseText: `Voc√™ escolheu agendar o servi√ßo de ${servicesList.find(s => s.id === state.currentServiceId)?.name}. Por favor, me informe em qual data voc√™ gostaria de ser atendido (DD/MM/YYYY):`,
          newState: 'appointment_date',
          stateChanges: { 
            appointment: { 
              service: servicesList.find(s => s.id === state.currentServiceId)?.name || "", 
              date: "", 
              time: "" 
            } 
          }
        };
      } else {
        return {
          responseText: getMainMenuOptions(),
          newState: 'main_menu'
        };
      }
      
    case 'faq':
      // Check if user selected a FAQ by number
      const faqIndex = parseInt(lowerInput) - 1;
      if (!isNaN(faqIndex) && faqIndex >= 0 && faqIndex < faqList.length) {
        return {
          responseText: getFAQAnswer(faqIndex),
          newState: 'main_menu'
        };
      } else {
        return {
          responseText: "Desculpe, n√£o entendi qual pergunta voc√™ escolheu. Por favor, digite o n√∫mero da pergunta ou 'menu' para voltar:",
          newState: 'faq'
        };
      }
      
    case 'appointment_service':
      // Check if user selected a service by number
      const apptServiceIndex = parseInt(lowerInput) - 1;
      if (!isNaN(apptServiceIndex) && apptServiceIndex >= 0 && apptServiceIndex < servicesList.length) {
        const serviceName = servicesList[apptServiceIndex].name;
        return {
          responseText: `Voc√™ escolheu agendar o servi√ßo de ${serviceName}. Por favor, me informe em qual data voc√™ gostaria de ser atendido (DD/MM/YYYY):`,
          newState: 'appointment_date',
          stateChanges: { 
            appointment: { 
              service: serviceName, 
              date: "", 
              time: "" 
            } 
          }
        };
      } else {
        // Try to match service name in input
        const serviceMatch = servicesList.find(service => 
          lowerInput.includes(service.name.toLowerCase())
        );
        
        if (serviceMatch) {
          return {
            responseText: `Voc√™ escolheu agendar o servi√ßo de ${serviceMatch.name}. Por favor, me informe em qual data voc√™ gostaria de ser atendido (DD/MM/YYYY):`,
            newState: 'appointment_date',
            stateChanges: { 
              appointment: { 
                service: serviceMatch.name, 
                date: "", 
                time: "" 
              } 
            }
          };
        }
        
        return {
          responseText: "Desculpe, n√£o entendi qual servi√ßo voc√™ escolheu. Por favor, digite o n√∫mero correspondente ao servi√ßo desejado:\n\n" + servicesList.map((service, index) => `${index + 1}. ${service.name}`).join('\n'),
          newState: 'appointment_service'
        };
      }
      
    case 'appointment_date':
      // Simple date validation (could be improved)
      const datePattern = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
      if (datePattern.test(lowerInput)) {
        return {
          responseText: `Data registrada: ${lowerInput}. Agora me informe o hor√°rio preferencial para o atendimento (HH:MM):`,
          newState: 'appointment_time',
          stateChanges: { 
            appointment: { 
              ...state.appointment as AppointmentInfo,
              date: lowerInput
            } 
          }
        };
      } else {
        return {
          responseText: "Por favor, informe a data no formato DD/MM/YYYY (exemplo: 25/04/2025):",
          newState: 'appointment_date'
        };
      }
      
    case 'appointment_time':
      // Simple time validation
      const timePattern = /^\d{1,2}:\d{2}$/;
      if (timePattern.test(lowerInput)) {
        return {
          responseText: `Hor√°rio registrado: ${lowerInput}. Existe algum detalhe adicional sobre o seu problema que gostaria de nos informar? (Se n√£o houver, digite "n√£o")`,
          newState: 'appointment_details',
          stateChanges: { 
            appointment: { 
              ...state.appointment as AppointmentInfo, 
              time: lowerInput 
            } 
          }
        };
      } else {
        return {
          responseText: "Por favor, informe o hor√°rio no formato HH:MM (exemplo: 14:30):",
          newState: 'appointment_time'
        };
      }
      
    case 'appointment_details':
      const details = lowerInput === 'n√£o' ? "Nenhum detalhe adicional" : lowerInput;
      const appointment = {
        ...state.appointment as AppointmentInfo,
        details: details
      };
      
      return {
        responseText: `Obrigado! Seu agendamento foi registrado com sucesso.
        
üìù Resumo do agendamento:
- Servi√ßo: ${appointment.service}
- Data: ${appointment.date}
- Hor√°rio: ${appointment.time}
- Detalhes: ${appointment.details}

Um de nossos t√©cnicos entrar√° em contato para confirmar o agendamento. Posso ajudar com mais alguma coisa?`,
        newState: 'main_menu',
        stateChanges: { appointment }
      };
      
    case 'contact_name':
      if (lowerInput.length > 2) {
        return {
          responseText: `Obrigado, ${input}! Agora, por favor, me informe seu e-mail para contato:`,
          newState: 'contact_email',
          stateChanges: { 
            contact: { 
              name: input, 
              email: "" 
            } 
          }
        };
      } else {
        return {
          responseText: "Por favor, informe seu nome completo:",
          newState: 'contact_name'
        };
      }
      
    case 'contact_email':
      // Simple email validation
      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (emailPattern.test(lowerInput)) {
        return {
          responseText: `Perfeito! Seus dados foram registrados:
          
- Nome: ${state.contact?.name}
- E-mail: ${lowerInput}

Um de nossos t√©cnicos entrar√° em contato em breve. Enquanto isso, posso ajudar com mais alguma coisa?`,
          newState: 'main_menu',
          stateChanges: { 
            contact: { 
              ...state.contact as Contact, 
              email: lowerInput 
            } 
          }
        };
      } else {
        return {
          responseText: "Por favor, informe um e-mail v√°lido:",
          newState: 'contact_email'
        };
      }
      
    case 'human_agent':
      return {
        responseText: "Um de nossos t√©cnicos j√° foi notificado e entrar√° em contato nos pr√≥ximos minutos. Deseja voltar ao menu principal enquanto aguarda?",
        newState: 'main_menu'
      };
      
    case 'exit':
      return {
        responseText: getGreetingMessage(),
        newState: 'greeting'
      };
      
    default:
      return {
        responseText: "Desculpe, ocorreu um erro no sistema. Vamos recome√ßar. " + getMainMenuOptions(),
        newState: 'main_menu'
      };
  }
};
